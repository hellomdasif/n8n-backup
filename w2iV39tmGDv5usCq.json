{
  "active": false,
  "connections": {
    "Trigger": {
      "main": [
        [
          {
            "node": "start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "UPDATE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-14T12:52:28.347Z",
  "id": "w2iV39tmGDv5usCq",
  "isArchived": false,
  "meta": null,
  "name": "UPDATE-STATUS-TELEGRAM",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot8203320315:AAHChV4LMocldLcQLcfKcILmMtsanpEOpg8/editMessageCaption",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Trigger').item.json.callback_query.message.chat.id }}"
            },
            {
              "name": "message_id",
              "value": "={{ $('Trigger').item.json.callback_query.message.message_id }}"
            },
            {
              "name": "caption",
              "value": "=üìπ <b>Title</b> <code>{{ $('start').item.json.title }} </code>  \nüé¨ <b>Username:</b> <code>{{ $('start').item.json.username }}</code>  \nüìä <b>Status:</b> {{ $('Trigger').item.json.callback_query.data.includes('pending') ? '‚ùå PENDING' : '‚úÖ DONE ' }}\nüÜî <b>ID:</b> <code>{{ $('start').item.json.id }}</code>\nüíæ <b>DATABASE:</b> <code>{{ $('start').item.json.database }}</code>\nüîó <b>Link:</b> <code>{{ $('start').item.json.link }}</code>"
            },
            {
              "name": "parse_mode",
              "value": "HTML"
            },
            {
              "name": "reply_markup",
              "value": "={{ JSON.stringify({ inline_keyboard: [[ { text: \"‚úÖ Mark Done\", callback_data: \"status_done\" }, { text: \"üü° Mark Pending\", callback_data: \"status_pending\" } ]] }) }}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        224
      ],
      "id": "a59bf2d7-bbcf-420b-b393-f8626837991f",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "updates": [
          "callback_query"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -704,
        224
      ],
      "typeVersion": 1.2,
      "id": "2a8f0531-bf0b-4c35-a7f6-701a045ef4a5",
      "name": "Trigger",
      "webhookId": "176735ac-766f-4bb9-bdd3-a36bda7cc74a",
      "credentials": {
        "telegramApi": {
          "id": "v6E8o9RCPVZgGRMN",
          "name": "YubePosts_bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input caption (replace this line with your real source, e.g. $('Trigger').item.json.callback_query.message.caption)\nconst caption = $input.first().json.callback_query.message.caption || \"\";\n\n// Initialize empty defaults\nlet title = \"\";\nlet username = \"\";\nlet status = \"\";\nlet id = \"\";\nlet database = \"\";\nlet link = \"\";\n\n// Extract values using regex (tolerant of optional <b> and <code> tags)\nconst titleMatch = caption.match(/üìπ\\s*(?:<b>)?([^<\\n]+?)(?:<\\/b>)?(?=\\n|$)/i);\nconst usernameMatch = caption.match(/üé¨\\s*(?:<b>)?Username:?\\s*(?:<\\/b>)?\\s*(?:<code>)?([^<\\n]+?)(?:<\\/code>)?(?=\\n|$)/i);\nconst statusMatch = caption.match(/üìä\\s*(?:<b>)?Status:?\\s*(?:<\\/b>)?\\s*(?:<code>)?([^<\\n]+?)(?:<\\/code>)?(?=\\n|$)/i);\nconst idMatch = caption.match(/üÜî\\s*(?:<b>)?ID:?\\s*(?:<\\/b>)?\\s*(?:<code>)?([^<\\n]+?)(?:<\\/code>)?(?=\\n|$)/i);\n\n// New: DATABASE (handles alphanumeric, underscores, dots, etc.)\nconst databaseMatch = caption.match(/üíæ\\s*(?:<b>)?DATABASE:?\\s*(?:<\\/b>)?\\s*(?:<code>)?([^<\\n]+?)(?:<\\/code>)?(?=\\n|$)/i);\n\n// New: Link (capture a URL; stops at whitespace or HTML tag/newline)\nconst linkMatch = caption.match(/üîó\\s*(?:<b>)?Link:?\\s*(?:<\\/b>)?\\s*(?:<code>)?([^\\s<\\n]+)(?:<\\/code>)?(?=\\n|$)/i);\n\n// Assign safely (trim whitespace)\nif (titleMatch) title = titleMatch[1].trim();\nif (usernameMatch) username = usernameMatch[1].trim();\nif (statusMatch) status = statusMatch[1].trim();\nif (idMatch) id = idMatch[1].trim();\nif (databaseMatch) database = databaseMatch[1].trim();\nif (linkMatch) link = linkMatch[1].trim();\n\n// Output result\nreturn [\n  {\n    json: {\n      title,\n      username,\n      status,\n      id,\n      database,\n      link,\n      original_caption: caption\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        224
      ],
      "id": "61b792e2-96f2-46cc-bb6b-bd18bdff4c86",
      "name": "start"
    },
    {
      "parameters": {
        "operation": "update",
        "table": {
          "__rl": true,
          "value": "={{ $('start').item.json.database }}",
          "mode": "name"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "id",
        "valueToMatchOn": "={{ $('start').item.json.id }}",
        "valuesToSend": {
          "values": [
            {
              "column": "youtube",
              "value": "={{ $('Trigger').item.json.callback_query.data.includes('pending') ? 'Processing' : 'DONE' }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        -16,
        224
      ],
      "id": "a8ac420f-478f-4dde-8502-6586449d384b",
      "name": "UPDATE",
      "credentials": {
        "mySql": {
          "id": "aH3xsjJBm3OWPFrR",
          "name": "MySQL account"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "hellomdasif",
    "name": "n8n-backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-14T12:52:28.352Z",
      "updatedAt": "2025-10-14T12:52:28.352Z",
      "role": "workflow:owner",
      "workflowId": "w2iV39tmGDv5usCq",
      "projectId": "COQIBF46Vn0bg2e3"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-17T03:28:44.000Z",
  "versionId": "46649fe2-9090-434b-b70e-dee9cf4ba3fa"
}